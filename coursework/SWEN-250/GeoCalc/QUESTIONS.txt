These questions all concern the code in the driver program, geocalc.rb

Consider the first executable line:

   $stdin.each do | line; figure, command, x0, y0, x1, y1, p1, p2 |

1. (1 point) What is passed to the 'line' variable by the each method?

	the input from the command line, or the standard input. It could
	be either something the user enteres from command line or it 
	could be an imported text file. Anything that uses standard input.
	It will be a string, which is why line.split is used seperate the 
	different inputs.

2. (1 point) What is the purpose of the semi-colon (';') and the list of
   identifiers that follow it. You'll have to look this up in the Ruby
   online documentation.

	the semi colon is used to 'chain' statements. The identifiers that
	follow it are simply being declared to have values assigned to them
	later.

3. (1 point) The syntax of commands is given in the comments at the head
   of the file, namely:

   C,X0,Y0,X1,Y1

   Given this, what does line.split(',') do? Hint: you need to look up the
   split method for class String in the Ruby documentation.

	line.split(',') will create an array from the input, with each
	element being the input specfied BEFORE the ','. For instance,
	the above would become [C , X0 , Y0 , X1 , Y1](obviously the
	commas aren't helpful in the above list, but each element in itself
	does NOT have a comma. The comma is removed.)

4. (1 point) The complete statment using line.split(',') is:

   command, x0, y0, x1, y1 = line.split(',')

   This is an example of Ruby's multiple assignment construct. Look up how
   multiple assignment works and describe how multiple assignment, in
   combination with line.split(','), ends up assigning the command character
   and the four points to the appropriate variables on the left side of '='.

	Multiple assignment just takes the values that SHOULD have gone
	into an array, and instead assigns them to their own individual
	variables. For instance, command would be equal to C (from above)
	in this case.

5. (2 points) Describe how the case statement works in terms of how it
   executes the proper code for each command.

	The case statements check to see whether the command variable 
	equal to a character, specifically 'l', 'r', or 'c'. If it is
	equal to one of those characters, then the code will execute
	that 'when' statement. It is similar to a switch statement. 
	The else after "when 'c'" will be the default case, and when
	an invalid character is entered for command it will put
	"Unknown command".

