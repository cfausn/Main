Lambda

Primative types in java: int, bool, etc. Not classes


System.out.println() < calls the toString of objects

people.forEach(new PersonPrinter());

Iterator<E> iter = this.iterator();

people.stream().forEach(System.out::println);


ONLY NEED TO KNOW FILTER AND FOREACH

people.stream.filter(p -> p.mayDrink()).forEach(System.out::println);

people.stream().filter(Person::mayDrink).forEach(System.out::println);



EXAMMMMMMMM

Knowldege of properties and interfaces in the hierarchies of the JCF

Working with generic classes{
	private *insert type here* variable; 
	Class c = new Class();
	Generic type constraints <- ??
}

Equality, == vs equals, == uses memory locations

What types are instantiable <- only sub classes, not abstract

Type conformance in assignment / parameter assignment

Primative vs class-based types{
	int, char, double, long, boolean, <-all primative
	String, Array[], <-all class-based
	null <- no memory currently allocated to an object reference
}


Interfaces{
	implements *interface here* <- must implement all methods declared
	extends *interface here* <- must implement abstracts
	extends *class here* <- if abstract must implement abstract classes
	Rules of instantiation: Cannot instatiate a abstract (unless it is making an anonymous class)
	Super: used to call the abstract class's constructor (and create an instance in that super class)
	       used to call the abstract class's methods
	Type conformance: must conform to specified type unless you use an *Object* object.
	
}
How to build a simple class from scratch

Special methods from Object that are normally overridden: toString, hashCode, equals and why{
toString is overridden for custom classes and custom printing
hashCode is overridden for custom storage of objects by hash values
equals is overridden to compare different types/compare things differently

The Comparable<T> natural ordering interface		<- ???
The Comparator<T> interface used in imposed ordering	<- ???

}
Using functiona interfaces and lambdas:
	someclass.forEach(System.out::println);	<- ??



THINGS TO REMEMBER:
	Encapsulation: The hiding of data through identifiers (ie Private, Public, Protected)
	Data Members store items (ie Private int storethis;), Methods are obvious (accomplish something)
	== only looks at a field's memory location, not it's actual value. .equals() uses values.
	Polymorphism: Behavior detailed in an interface/abstract class but can be overridden to accomplish 
		      different tasks in different classes/objects.
	Superclass: class from which the subclass comes (parent class)
	Subclass: class derived from another class
	IF AN OBJECT IS EXTENDED, YOU MUST CALL THE CONSTRUCTOR OF THE EXTENDED CLASS FIRST
	Overloading: Number/Types of parameters is different for the methods
	HashSet: holds unordered data with no duplicates
	TreeSet: holds sorted data with no duplicates
	HashMap: Like python dictionary, holds unordered data
	TreeMap: Doesn't inherit from collection, holds sorted data
	

	COMPARABLE INTERFACE: Used to provide the natural sorting of objects based on a SINGLE field. uses compareTo(T obj) to compare
	COMPARATOR INTERFACE: Used to sort the collection based on one or more fields, Collections.sort(list, comparator)

	Protected: hid from 1, world
	no modifier(Default): hid from 2, subclass world